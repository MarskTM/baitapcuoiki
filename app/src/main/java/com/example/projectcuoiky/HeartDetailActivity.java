package com.example.projectcuoiky;

import com.example.projectcuoiky.MyApp;
import com.example.projectcuoiky.session.DeviceSession;

import android.Manifest;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.components.XAxis;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;
import com.github.mikephil.charting.formatter.IndexAxisValueFormatter;

import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Set;

public class HeartDetailActivity extends AppCompatActivity {

    private static final int REQUEST_BLUETOOTH_CONNECT = 1001;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_heart_detail);

        // N√∫t back
        ImageView btnBack = findViewById(R.id.btnBack);
        btnBack.setOnClickListener(v -> finish());

        // View li√™n quan ƒë·∫øn nh·ªãp tim
        TextView textHeartRate = findViewById(R.id.textHeartRate);
        TextView textStatus = findViewById(R.id.textStatus);
        TextView textTrend = findViewById(R.id.textTrend);

        // View BLE
        TextView textBleName = findViewById(R.id.textBleName);
        TextView textBleAddress = findViewById(R.id.textBleAddress);
        TextView textBleMethod = findViewById(R.id.textBleMethod);

        // --------- L·∫•y th√¥ng tin ƒê·ªí TH·ªä ---------
        DeviceSession session = MyApp.getDeviceSession();

        if (session.getType() == DeviceSession.Type.SERVER) {
            String url = session.getServerUrl();
            fetchDataFromServer(url); // g·ªçi h√†m fetch server
        } else if (session.getType() == DeviceSession.Type.BLUETOOTH) {
            String name = session.getBluetoothDeviceName();
            String mac = session.getBluetoothMac();
            connectToBluetoothDevice(mac); // g·ªçi h√†m x·ª≠ l√Ω BLE
        } else {
            Toast.makeText(this, "Ch∆∞a c√≥ thi·∫øt b·ªã k·∫øt n·ªëi", Toast.LENGTH_SHORT).show();
        }

        // --------- D·ªÆ LI·ªÜU NH·ªäP TIM M·∫™U ---------
        List<Entry> entries = new ArrayList<>();
        entries.add(new Entry(0, 98));
        entries.add(new Entry(1, 101));
        entries.add(new Entry(2, 103));
        entries.add(new Entry(3, 100));
        entries.add(new Entry(4, 105));

        int currentHeartRate = (int) entries.get(entries.size() - 1).getY();
        textHeartRate.setText(currentHeartRate + " nh·ªãp/ph√∫t");

        // Ph√¢n lo·∫°i t√¨nh tr·∫°ng
        if (currentHeartRate < 60) {
            textStatus.setText("‚ù§Ô∏è T√¨nh tr·∫°ng: R·ªëi lo·∫°n nh·∫π");
        } else if (currentHeartRate <= 100) {
            textStatus.setText("‚ù§Ô∏è T√¨nh tr·∫°ng: B√¨nh th∆∞·ªùng");
        } else {
            textStatus.setText("‚ù§Ô∏è T√¨nh tr·∫°ng: C·∫£nh b√°o");
        }

        // Ph√¢n lo·∫°i xu h∆∞·ªõng
        int prev = (int) entries.get(entries.size() - 2).getY();
        int diff = currentHeartRate - prev;

        if (diff >= 3) {
            textTrend.setText("üìà Xu h∆∞·ªõng: TƒÉng nh·∫π");
        } else if (diff <= -3) {
            textTrend.setText("üìà Xu h∆∞·ªõng: Gi·∫£m d·∫ßn");
        } else {
            textTrend.setText("üìà Xu h∆∞·ªõng: ·ªîn ƒë·ªãnh");
        }

        // --------- HI·ªÇN TH·ªä THI·∫æT B·ªä BLE ---------
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT)
                    != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this,
                        new String[]{Manifest.permission.BLUETOOTH_CONNECT},
                        REQUEST_BLUETOOTH_CONNECT);
                return;
            }
        }

        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if (bluetoothAdapter != null && bluetoothAdapter.isEnabled()) {
            Set<BluetoothDevice> bondedDevices = bluetoothAdapter.getBondedDevices();

            if (bondedDevices != null && bondedDevices.size() > 0) {
                BluetoothDevice device = bondedDevices.iterator().next();

                String name = device.getName();
                String address = device.getAddress();

                textBleName.setText("‚Ä¢ T√™n thi·∫øt b·ªã: " + (name != null ? name : "Kh√¥ng r√µ"));
                textBleAddress.setText("‚Ä¢ ƒê·ªãa ch·ªâ: " + address);
                textBleMethod.setText("‚Ä¢ Ph∆∞∆°ng th·ª©c: Bluetooth Classic");
            } else {
                textBleName.setText("‚Ä¢ T√™n thi·∫øt b·ªã: Kh√¥ng t√¨m th·∫•y");
                textBleAddress.setText("‚Ä¢ ƒê·ªãa ch·ªâ: --");
                textBleMethod.setText("‚Ä¢ Ph∆∞∆°ng th·ª©c: Kh√¥ng k·∫øt n·ªëi");
            }
        } else {
            textBleName.setText("‚Ä¢ T√™n thi·∫øt b·ªã: Bluetooth ƒëang t·∫Øt");
            textBleAddress.setText("‚Ä¢ ƒê·ªãa ch·ªâ: --");
            textBleMethod.setText("‚Ä¢ Ph∆∞∆°ng th·ª©c: Kh√¥ng k·∫øt n·ªëi");
        }

        // --------- V·∫º ƒê·ªí TH·ªä ---------
        LineChart lineChart = findViewById(R.id.lineChart);

        Calendar now = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String[] timeLabels = new String[5];
        for (int i = 0; i < 5; i++) {
            Calendar cal = (Calendar) now.clone();
            cal.add(Calendar.HOUR_OF_DAY, i - 2);
            timeLabels[i] = sdf.format(cal.getTime());
        }

        LineDataSet dataSet = new LineDataSet(entries, "Nh·ªãp tim");
        dataSet.setColor(getResources().getColor(android.R.color.holo_red_dark));
        dataSet.setCircleColor(getResources().getColor(android.R.color.holo_red_dark));
        dataSet.setLineWidth(2f);
        dataSet.setCircleRadius(4f);
        dataSet.setDrawValues(false);

        LineData lineData = new LineData(dataSet);
        lineChart.setData(lineData);

        XAxis xAxis = lineChart.getXAxis();
        xAxis.setValueFormatter(new IndexAxisValueFormatter(timeLabels));
        xAxis.setGranularity(1f);
        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);
        xAxis.setDrawGridLines(false);
        xAxis.setLabelCount(timeLabels.length, true);

        lineChart.getAxisRight().setEnabled(false);
        lineChart.getDescription().setEnabled(false);
        lineChart.getLegend().setEnabled(false);
        lineChart.invalidate(); // refresh chart

    }

    // --- X·ª≠ l√Ω k·∫øt qu·∫£ khi ng∆∞·ªùi d√πng c·∫•p quy·ªÅn ---
    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_BLUETOOTH_CONNECT) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                recreate(); // ch·∫°y l·∫°i activity khi ƒë√£ c√≥ quy·ªÅn
            }
        }
    }

    private void fetchDataFromServer(String url) {
        new Thread(() -> {
            try {
                URL serverUrl = new URL(url);
                HttpURLConnection conn = (HttpURLConnection) serverUrl.openConnection();
                conn.setRequestMethod("GET");
                conn.setConnectTimeout(3000);
                conn.setReadTimeout(3000);

                int responseCode = conn.getResponseCode();
                if (responseCode == HttpURLConnection.HTTP_OK) {
                    BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                    StringBuilder response = new StringBuilder();
                    String line;
                    while ((line = in.readLine()) != null) {
                        response.append(line);
                    }
                    in.close();

                    JSONObject json = new JSONObject(response.toString());

                    int heartRate = json.getInt("heartRate");
                    double accel = json.getDouble("acceleration");
                    double x = json.getDouble("x");
                    double y = json.getDouble("y");
                    boolean fall = json.getBoolean("fall");

                    runOnUiThread(() -> {
                        // C·∫≠p nh·∫≠t l√™n giao di·ªán (b·∫°n c√≥ th·ªÉ tu·ª≥ ch·ªânh theo m√†n hi·ªán t·∫°i)
                        ((TextView) findViewById(R.id.textHeartRate)).setText(heartRate + " nh·ªãp/ph√∫t");
                        ((TextView) findViewById(R.id.textAcceleration)).setText(accel + " m/s¬≤");
                        ((TextView) findViewById(R.id.textX)).setText("x = " + x);
                        ((TextView) findViewById(R.id.textY)).setText("y = " + y);

                        TextView fallText = findViewById(R.id.textFallStatus);
                        fallText.setText(fall ? "Ph√°t hi·ªán t√© ng√£" : "Kh√¥ng c√≥ t√© ng√£");
                        fallText.setTextColor(fall ? Color.RED : Color.parseColor("#4CAF50"));
                    });

                } else {
                    Log.e("HTTP", "L·ªói k·∫øt n·ªëi server: " + responseCode);
                }
            } catch (Exception e) {
                e.printStackTrace();
                Log.e("HTTP", "L·ªói: " + e.getMessage());
            }
        }).start();
    }

    private void connectToBluetoothDevice(String mac) {
        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();

        if (bluetoothAdapter == null || !bluetoothAdapter.isEnabled()) {
            Toast.makeText(this, "Bluetooth kh√¥ng kh·∫£ d·ª•ng", Toast.LENGTH_SHORT).show();
            return;
        }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S &&
                ActivityCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT)
                        != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.BLUETOOTH_CONNECT}, 1001);
            return;
        }

        BluetoothDevice targetDevice = null;
        for (BluetoothDevice device : bluetoothAdapter.getBondedDevices()) {
            if (device.getAddress().equals(mac)) {
                targetDevice = device;
                break;
            }
        }

        if (targetDevice == null) {
            Toast.makeText(this, "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã BLE", Toast.LENGTH_SHORT).show();
            return;
        }

        // ‚úÖ ƒê√¢y l√† n∆°i b·∫°n th·ª±c hi·ªán k·∫øt n·ªëi GATT ho·∫∑c custom BLE protocol c·ªßa b·∫°n
        Toast.makeText(this, "ƒê√£ t√¨m th·∫•y BLE: " + targetDevice.getName(), Toast.LENGTH_SHORT).show();

        // TODO: Th√™m x·ª≠ l√Ω k·∫øt n·ªëi GATT t·∫°i ƒë√¢y n·∫øu c·∫ßn
    }
}
